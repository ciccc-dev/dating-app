// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id                String              @id @db.Uuid
  userId            String              @unique @map("user_id")
  userName          String              @map("user_name") @db.VarChar(50)
  birthday          DateTime
  gender            String              @db.VarChar(30)
  sexualOrientation String              @map("sexual_orientation") @db.VarChar(30)
  aboutMe           String              @map("about_me")
  registeredAt      DateTime            @map("registered_at") @db.Timestamptz(3)
  updatedAt         DateTime            @map("updated_at") @db.Timestamptz(3)
  photos            PhotoUrl[]
  purposes          Purpose[]
  interests         Interest[]
  filter            Filter?
  geolocation       Geolocation?
  ChatSender        Chat[]              @relation("sender")
  ChatReceiver      Chat[]              @relation("receiver")
  UnselectedBy      ProfileUnselected[] @relation("UnselectedBy")
  UnselectedProfile ProfileUnselected[] @relation("UnselectedProfile")
  BlockedBy         ProfileBlocked[]    @relation("BlockedBy")
  BlockedProfile    ProfileBlocked[]    @relation("BlockedProfile")

  @@index([birthday])
  @@index([gender])
  @@index([sexualOrientation])
  @@map("profile")
}

model Purpose {
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String  @map("profile_id") @db.Uuid
  name      String  @db.VarChar(20)

  @@id([profileId, name])
  @@index([name])
  @@map("purpose")
}

model PhotoUrl {
  id           String   @id @db.Uuid
  profile      Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId    String   @map("profile_id") @db.Uuid
  photoUrl     String   @map("photo_url")
  sortOrder    Int      @map("sort_order")
  registeredAt DateTime @map("registered_at") @db.Timestamptz(3)
  updatedAt    DateTime @map("updated_at") @db.Timestamptz(3)

  @@index([profileId])
  @@map("photo_url")
}

model Interest {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(20)
  sortOrder Int       @map("sort_order")
  profiles  Profile[]
  filters   Filter[]

  @@map("interest")
}

model Filter {
  id                          String     @id @db.Uuid
  profile                     Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId                   String     @unique @map("profile_id") @db.Uuid
  showMe                      String     @map("show_me") @db.VarChar(10)
  minAge                      Int        @default(0) @map("min_age")
  maxAge                      Int        @default(100) @map("max_age")
  isAgeFiltered               Boolean    @default(false) @map("is_age_filtered")
  distance                    Int        @default(50)
  isDistanceFiltered          Boolean    @default(false) @map("is_distance_filtered")
  sexualOrientations          String[]   @map("sexual_orientations") @db.VarChar(30)
  isSexualOrientationFiltered Boolean    @default(false) @map("is_sexual_orientation_filtered")
  purposes                    String[]   @db.VarChar(20)
  isPurposeFiltered           Boolean    @default(false) @map("is_purpose_filtered")
  interests                   Interest[]
  isInteretFiltered           Boolean    @default(false) @map("is_interest_filtered")

  @@map("filter")
}

model Chat {
  id         String   @id @db.Uuid
  sender     Profile  @relation("sender", fields: [sentBy], references: [userId])
  receiver   Profile  @relation("receiver", fields: [receivedBy], references: [userId])
  sentBy     String   @map("sent_by")
  receivedBy String   @map("received_by")
  message    String
  hasRead    Boolean  @map("has_read")
  timestamp  DateTime @db.Timestamptz(3)

  @@map("chat")
}

model ProfileUnselected {
  id                String   @id @db.Uuid
  profile           Profile  @relation("UnselectedBy", fields: [unselectedBy], references: [id], onDelete: Cascade)
  unselectedBy      String   @map("unselected_by") @db.Uuid
  unselectedprofile Profile  @relation("UnselectedProfile", fields: [unselectedProfile], references: [id], onDelete: Cascade)
  unselectedProfile String   @map("unselected_profile") @db.Uuid
  registeredAt      DateTime @map("registered_at") @db.Timestamptz(3)

  @@index([unselectedBy])
  @@index([unselectedProfile])
  @@map("user_unselected")
}

model ProfileBlocked {
  id             String   @id @db.Uuid
  profile        Profile  @relation("BlockedBy", fields: [blockedBy], references: [id], onDelete: Cascade)
  blockedBy      String   @map("blocked_by") @db.Uuid
  blockedprofile Profile  @relation("BlockedProfile", fields: [blockedProfile], references: [id], onDelete: Cascade)
  blockedProfile String   @map("blocked_profile") @db.Uuid
  registeredAt   DateTime @map("registered_at") @db.Timestamptz(3)

  @@index([blockedBy])
  @@index([blockedProfile])
  @@map("user_block")
}

model Geolocation {
  id         String  @id @db.Uuid
  profile    Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId  String  @unique @map("profile_id") @db.Uuid
  location   String  @db.VarChar(60)
  latitude   Decimal @db.Decimal(17, 14)
  longtitude Decimal @db.Decimal(17, 14)

  @@index([latitude])
  @@index([longtitude])
  @@map("geolocation")
}
